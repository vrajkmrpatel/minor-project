@startuml

class TicketDistributor {
  ID
}

class Passenger {
  ID
  type
  isFrequentTraveler
}

class Ticket {
  ID
  type
  price
  departureTime
  date
  validFrom
  validTill
  validityDuration
  issuedFrom
  destinationStation
}

class MetroPass {
  ID
  type
  validityDuration
}

class TimeCard {
  ID
  type
  validityDuration
}

class Transaction {
  ID
  status
  amount
}

class DisplayInterface {
  type
}

class PaymentMethod {
  type
}

class CurrencyNote {
  ID
  isOriginal
  value
}

class Error {
  ID
  type
  message
}

class ErrorMessage {
  message
}

class TouchScreen {
  size
}

TicketDistributor *-- Ticket : The TicketDistributor issues and manages Tickets; Tickets cannot exist independently without the distributor.
TicketDistributor --> MetroPass : The TicketDistributor reads and processes MetroPasses.
TicketDistributor --> TimeCard : The TicketDistributor reads and processes TimeCards.
TicketDistributor *-- Transaction : The TicketDistributor creates and manages Transactions; Transactions are intrinsically tied to the distributor.
TicketDistributor *-- DisplayInterface : The TicketDistributor uses a DisplayInterface; the interface is part of the distributor and cannot exist independently.
TicketDistributor --> PaymentMethod : The TicketDistributor processes various PaymentMethods.
TicketDistributor --> CurrencyNote : The TicketDistributor recognizes and processes CurrencyNotes.
TicketDistributor --> Error : The TicketDistributor handles and reports Errors.
TicketDistributor *-- TouchScreen : The TicketDistributor uses a TouchScreen; the touchscreen is an integral part of the distributor.
TicketDistributor --> Passenger : The TicketDistributor serves Passengers.
Transaction --> PaymentMethod : A Transaction uses a PaymentMethod.
Error *-- ErrorMessage : An Error contains an ErrorMessage; the message is inseparable from the error.

@enduml